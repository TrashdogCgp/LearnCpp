8_10
For statements

The for statement (also called for loop) is preferred when we have an obvious loop variable because it lets us easily and concisely define, initialize, test, and change the value of loop variables.

As of C++11, there are two kinds of for loops.
The range-based for statement is in chapter 16.

syntax: for(init-statement; condition; end-expression)

A for-statement is evaluated in 3 parts.
First, the init-statement is executed. This happens only once when the loop is initiated.
The init-statement is typically used for variable definition and initialization.
These variables have "loop scope" (block scope).

Second, for each loop iteration, the condition is evaluated. If it evaluates to true, the statement is executed. If it evaluates to false, the loop terminates and execution continues with the next statement beyond the loop.

Finally, after the statement is executed, the end-expression is evaluated. Typically, this increments or decrements the loop variables from the init statement.

After the end-expression evaluated, execution returns to the second step (condition re-evaluated).

Evaluating the condition in a for loop can happen in many different ways.
However, avoid != in loop condition evaluation. Less or greater operations will terminate even if the loop variable jumps over the value you'd otherwise compare against.

Best practice: Avoid operator != when doing numeric comparisions in the for-loop condition.

OBO errors (off by one) occur when the loop iterates one too many or one too few times to produce the desired result.
The most common cause for these errors is using the wrong relational operator, but they can sometimes occur with pre-increment or pre-decrement where post was intended, or vice-versa.

for loops can omit any or all of the statements or expressions.
For example:
    int i{ 0 };
    for ( ; i < 10; ) // no init-statement or end-expression
    {
        std::cout << i << ' ';
        ++i;
    }
There are cases where not declaring a loop variable (because one already exists) or not incrementing it in the end (because this happens some other way) is desired.

Note that the following is an infinte loop, though:
    for (;;)
        statement;
For some reason, the C++ standard explicitly defines that an omitted condition-expression in a for loop should be treated as true.
Avoid this and use while(true) instead for intentional infinite loops.

For loops with multiple counters
Sometimes, for loops need to work with multiple variables.
To assist with this, programmers can define multiple variables in the init-statement, and can make use of the comma operator to change the value of multiple variables in the end expression.
e.g.
    for (int x{ 0 }, y{ 9 }; x < 10; ++x, --y)
        std::cout << x << ' ' << y << '\n';
This is one of very few places in C++ where defining multiple variables in the same statement and using the comma operator is considered acceptable practice.

Best practice: Defining multiple variables in the init statement and using the comma operator in the end expression is acceptable inside of a for loop.

Like other types of loops, for loops can be nested in other loops.

Best practice:
Prefer while loops over for loops when there is no obvious loop variable.
Prefer for loops over while loops when there is an obvious loop variable.

Quiz
1. Write a for loop that prints every even number from 0 to 20
Forget a separate code file. This one's trivial.
for(int i{0}; i<=20; i+=2)
{
    std::cout << i << '\n'; //Not gonna bother with modulo tbh
}

2. Write a function named sumTo() that takes an integer parameter named value and returns the sum of all numbers from 1 to value.
Man, just gonna do this one here, too.
Not sure how they want me to handle the negative case, but...
int sumTo(int value)
{
    int sum{0};
    for(int i{0}; i<=value; ++i)
    {
        sum += i;
    }
    return sum;
}


3. What's wrong with the following for loop?
// Print all numbers from 9 to 0
for (unsigned int i{ 9 }; i >= 0; --i)
    std::cout << i<< ' ';

Well, using an unsigned int will never allow i to evaluate negative, so the break condition will never be false. Infinite loop!

4. Write fizzbuzz(), which takes a parameter determining what to count to.
see ch8_10_4.cpp
WHEW that's still easy, I'd have felt extremely sad if I'd so much as made a significant mistake.

5. Modify the fizzbuzz program to add the rule that numbers divisible by seven should be replaced with "pop".
.......I don't agree with their sample output here.
Maybe I just don't understand what they're saying, but I don't think based on their prompt that 105 should prompt a printout of "fizzbuzzpop".
I can do what the prompt says, or match the sample output.
At risk of making Kreia angry, I will do nothing. Not to turn down a quiz/challenge, but the expected behavior isn't totally clear and I looked at the solution anyway after staring at the prompt for a while and wondering if I was missing some kind of intricate logic.
I'm not.
Sorry.



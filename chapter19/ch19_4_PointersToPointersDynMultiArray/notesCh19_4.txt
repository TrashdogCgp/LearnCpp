19_4
Pointers to pointers and dynamic multidimensional arrays

A pointer to a pointer is exactly what you'd expect; a pointer can hold the address of another pointer.

A normal pointer to an int is declared using a single asterisk:
    int* ptr; //pointer to an int, one asterisk

A pointer to a pointer to an int is declared using two asterisks
    int** ptrptr;

A pointer to a pointer works just like a normal pointer; you can dereference it to retrieve the value pointed to. And because that value is a pointer itself, you can dereference it again to get to the underlying value.
These dereferences can be done consecutively.
e.g.
    int value { 5 };

    int* ptr { &value };
    std::cout << *ptr << '\n'; // Dereference pointer to int to get int value

    int** ptrptr { &ptr };
    std::cout << **ptrptr << '\n'; // dereference to get pointer to int, dereference again to get int value

Note that you can't set a pointer to a pointer directly to a value.
e.g.
    int value { 5 };
    int** ptrptr { &&value }; // not valid
This is because the address of the & operator requires an lvalue, but &value here is an rvalue.
However, a pointer to a pointer can be set to null.

Arrays of pointers
Pointers to pointers have a few uses.
The most common is dynamically allocating an array of pointers.
e.g.
    int** array { new int*[10] };
This works just like a standard dynamically allocated array, except that the array elements are of type "pointer to integer" instead of integer.

Two-dimensional dynamically allocated arrays
Another common use for pointers to pointers is to facilitate dynamically allocated multidimensional arrays.
Unlike a 2d fixed array, dynamically allocating a 2d array is a bit more challenging.
e.g.
    int** array { new int[10][5] }; // won’t work!

There are two possible solutions. If the rightmost array is constexpr, you can do:
    int x { 7 }; // non-constant
    int (*array)[5] { new int[x][5] }; // rightmost dimension must be constexpr

Unfortunately, this doesn't work if the rightmost array isn't a compile-time constant. In that case, we have to do something more complicated.
We allocate an array of pointers first. Then we iterate through the array of pointers and allocate a dynamic array for each element.
Our dynamic 2d array is a dynamic 1d array of 1d arrays.
We can then access our array like usual.
e.g.
    int** array { new int*[10] }; // allocate an array of 10 int pointers — these are our rows
    for (int count { 0 }; count < 10; ++count)
        array[count] = new int[5]; // these are our columns
    array[9][4] = 3; // This is the same as (array[9])[4] = 3;
Note that because each array column is dynamically allocated independently, we don't have to make the 2d arrays rectangular.

Deallocating a dynamically allocated 2d array requires a loop as well:
    for (int count { 0 }; count < 10; ++count)
        delete[] array[count];
    delete[] array; // this needs to be done last

Note that we delete the array in the opposite order that we created it (elements first, then array itself). If we delete the array before the array columns, then we'd have to access deallocated memory to delete the array columns. This would result in undefined behavior.

Since it's easy to screw up allocating and deallocating 2d arrays, it's often easier to "flatten" a 2d array (of size x by y) into a 1d array of size x*y.
Simple math can then be used to convert a row and column index for a rectangular 2d array into a single index for a 1d array.
e.g.
    int getSingleIndex(int row, int col, int numberOfColumnsInArray)
    {
        return (row * numberOfColumnsInArray) + col;
    }

Passing a pointer by address
Much like we can use a pointer parameter to change the actual value of the underlying argument passed in, we can pass a pointer to a pointer to a function and use that pointer to change the value of the pointer it points to. Yes, this is confusing.
However, if we want a function to be able to modify what a pointer argument points to, this is generally better done using a reference to a pointer instead.

We can go to higher levels of pointer to pointer:
    int ***ptrx3;
But this is complicated, and not used much.

Conclusion:
We should avoid using pointers to pointers unless no other options are available, because they're complicated to use and potentially dangerous.
It's easy enough to dereference a null or dangling pointer with normal pointers. With a pointer to a pointer, it's even easier since you have to double-dereference to get to the underlying value.


19_3
Destructors

A destructor is another special kind of class member function that is executed when an object of that class is destroyed.
While constructors are designed to initialize a class, destructors are designed to help clean up.
When an object goes out of scope normally, or a dynamically allocated object is explicitly deleted using the delete keyword, the class destructor is automatically called (if it exists) to do any necessary cleanup before the object is removed from memory.
For simple classes (those that just initialize the values of normal member variables), a destructor is not needed because C++ will automatically clean up the memory for you.
However, if your class object is holding resources (e.g. dynamic memory, file/database handle), or if you need maintenance before the object is destroyed, the destructor is the right place to do this, since it's typically the last thing to happen before the object is destroyed.

Destructor naming
Like constructors, destructors have specific naming rules
    The destructor must have the same name as the class, preceded by a ~
    The destructor cannot take arguments
    The destructor has no return type

Generally, you shouldn't call a destructor explicitly; it will be called automatically when the object is destroyed, since there are rarely cases where you'd want to clean up an object more than once.
However, destructors may safely call other member functions since the object isn't destroyed until after the destructor executes.

Constructor and destructor timing
The constructor is called when an object is created, and the destructor is called when an object is destroyed.
We can demonstrate that with a simple example that calls cout statements:
#include <iostream>

    class Simple
    {
    private:
        int m_nID{};
    public:
        Simple(int nID)
            : m_nID{ nID }
        {
            std::cout << "Constructing Simple " << nID << '\n';
        }
        ~Simple()
        {
            std::cout << "Destructing Simple" << m_nID << '\n';
        }
        int getID() { return m_nID; }
    };
    int main()
    {
        // Allocate a Simple on the stack
        Simple simple{ 1 };
        std::cout << simple.getID() << '\n';
        // Allocate a Simple dynamically
        Simple* pSimple{ new Simple{ 2 } };
        std::cout << pSimple->getID() << '\n';
        // We allocated pSimple dynamically, so we have to delete it.
        delete pSimple;
        return 0;
    } // simple goes out of scope here

Note that Simple 1 is destroyed after Simple 2 because we deleted pSimple before the end of the function, whereas simple was not destroyed until the end of main().
Global variables are constructed before main() and destroyed after main().

RAII
RAII (Resource Acquisition Is Initialization) is a programming technique whereby resource use is tied to the lifetime of objects with automatic duration (e.g. non-dynamically allocated objects). In C++, RAII is implemented via classes with constructors and destructors. A resource (such as memory, a file/database handle, etc) is typically acquired in the object's constructor, though it can be acquired after the object is created in the event that this makes sense). That resource can then be used while the object is alive.
The resource is released in the destructor, when the object is destroyed.
The primary advantage of RAII is that it helps prevent resource leaks (e.g. memory not being deallocated) as all resource-holding objects are cleaned up automatically.

Allocation in the constructor and deallocation in the destructor is representative of this pattern.
std::string and std::vector are examples of classes in the std library that follow RAII; dynamic memory is acquired on initialization, and cleaned up automatically on destruction.

Warning about std::exit()
Note that if you use std::exit(), your program will terminate without calling destructors. Be wary if you're relying on destructors to do necessary cleanup work.

Summary
When constructors and destructors are used together, your classes can initialize and clean up after themselves without the programmer having to do any special work.
This reduces the odds of an error, and makes classes easier to use.

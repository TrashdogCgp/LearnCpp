19_5
Void pointers

The void pointer, also known as the generic pointer, is a special type of pointer that can be pointed at objects of any data type.
A void pointer is declared like a normal pointer, using the void keyword as the pointer's type.

e.g.
    void* ptr {};

A void pointer can point to objects of any data type.
However, because the void pointer doesn't know what type of object it's pointing to, dereferencing a void pointer is illegal. Instead, the void pointer must first be cast to another pointer type before the dereference can be performes.
e.g.
    int value{ 5 };
    void* voidPtr{ &value };
    // std::cout << *voidPtr << '\n'; // illegal: dereference of void pointer
    int* intPtr{ static_cast<int*>(voidPtr) }; // however, if we cast our void pointer to an int pointer...

The next obvious question: If a void pointer doesn't know what it's pointing to, how do we know what to cast it to?
Ultimately, that's the programmer's job to keep track of.

As an example:
    enum class Type
    {
        tInt, // note: we can't use "int" here because it's a keyword, so we'll use "tInt" instead
        tFloat,
        tCString
    };

    void printValue(void* ptr, Type type)
    {
        switch (type)
        {
        case Type::tInt:
            std::cout << *static_cast<int*>(ptr) << '\n'; // cast to int pointer and perform indirection
            break;
        case Type::tFloat:
            std::cout << *static_cast<float*>(ptr) << '\n'; // cast to float pointer and perform indirection
            break;
        case Type::tCString:
            std::cout << static_cast<char*>(ptr) << '\n'; // cast to char pointer (no indirection)
            // std::cout will treat char* as a C-style string
            // if we were to perform indirection through the result, then we'd just print the single char that ptr is pointing to
            break;
        default:
            std::cerr << "printValue(): invalid type provided\n";
            assert(false && "type not found");
            break;
        }
    }

Void pointer miscellany
Void pointers can be set to a null value
e.g.
    void* ptr{nullptr};

Because a void pointer doesn't know what type of object it's pointing to, deleting a void pointer will result in undefined behavior. To delete a void pointer, first static_cast it back to the appropriate type first.
It is not possible to do pointer arithmetic on a void pointer. This is because pointer arithmetic requires the pointer to know what size object it is pointing to, so it can increment or decrement the pointer appropriately.
Note that there is no such thing as a void reference; a void reference would be of type void &, and wouldn't know what type of value is references.

Conclusion
In general, it's a good idea to avoid using void pointers unless absolutely necessary. They effectively allow avoidance of type checking, which enables inadvertently doing things that make no sense without the compiler complaining about it.

Although it seems like a neat way to make a single function handle multiple data types, C++ actually offers better ways to do the same thing via function overloading while retaining type checking to help prevent misuse.
Many other places where void pointers would once be used are better done now via templates, which also offer strong type checking.
There are still occasional uses for void pointers. However, make sure there aren't better/safer ways to do the same thing using other language mechanisms first.

Quiz

1. What is the difference between a void pointer and a null pointer?
A null pointer points to explicitly nothing, while a void pointer points to something without needing to know its type info.

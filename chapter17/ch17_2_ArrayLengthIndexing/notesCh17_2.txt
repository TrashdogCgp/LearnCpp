17_2
std::array length and indexing

Because std::array is a standard library container class, it's subject to the same issues regarding unsigned values for lengths and indices.
This will be similar to std::vector, but since only std::array has full support for constexpr, we'll focus more on that.

Note that sign conversions are narrowing conversions, except when constexpr.

std::array is implementd as a struct whose declaration looks like this:
    template<typename T, std::size_t N> // N is a non-type template parameter
    struct array;

The non-type template parameter representing the array length (N) has type std::size_t, which is a large unsigned integral type.
So when we define a std::array, the length non-type template argument must either have type std::size_t or be convertible to a value of type std::size_t.
Because this value must be constexpr, we don't run into sign conversion issues when we use a signed integral value, because the compiler will happily convert a signed integral value to a std::size_t at compile time without it being considered a narrowing conversion.

The implicit compile-time conversion from int to std::size_t typically suffices for cases where we need a constexpr std::size_t.

The length and indices of std::array have type size_type, which is always std::size_t.
std::array defines a nested typedef member named size_type, which is an alias for the type used for the length (and indices, if supported) of the container.
In the case of std::array, size_type is always an alias for std::size_t.
Note that the non-type template parameter defining the length of the std::array is explicitly defined as std::size_t rather than size_type.
This is because size_type is a member of std::array, and isn't defined at that point.
This is the only place that uses std::size_t explicitly; everywhere else will use size_type.

Getting the length of a std::array
There are three common ways to get the length of a std::array object.

First, we can ask a std::array object for its length using the size() member function (returns length as unsigned size_type).

Unlike std::string and std::string_view, which have both length and size member functions that do the same thing, std::array (like most other container types in cpp) only has size().

Second, we can use std::size(), a non-member function that just calls size() member function for std::array.
This also returns the length as an unsigned size_type.

In C++20, we can use std::ssize(), which is a non-member function that returns the length as a large signed integral type (usually std::ptrdiff_t).

Getting the length of a std::array as a constexpr value
Because the length of a std::array is constexpr, each of the length-getting functions will return the length of a std::array as a constexpr value, even when called on a non-constexpr std::array object.
This means we can use any of these functions in constant expressions, and the length returned can be implicitly converted to an int without it being a narrowing conversion.

However, due to a language defect, the following example will return a non-constexpr value when called on a std::array function parameter passed by const reference:


    #include <array>
    #include <iostream>

    int main()
    {
        std::array arr { 9, 7, 5, 3, 1 }; // note: not constexpr for this example
        constexpr int length{ std::size(arr) }; // ok: return value is constexpr std::size_t and can be converted to int, not a narrowing conversion

        std::cout << "length: " << length << '\n';

        return 0;
    }

Subscripting std::array using operator [] or the at() member function
In intro to std::array, we covered that the most common way to index a std::array is to use the subscript operator. No bounds checking is done in this case, and passing in an invalid index will result in undefined behavior.

Just like std::vector, std::array also has an at() member function that does subscripting with runtime bounds checking.
This is stupid because we typically want to do bounds checking before indexing, or we want compile-time bounds checking.
Both at() and the subscript operator expect a std::size_t (size_type).

If either of these functions are called with a constexpr value, the compiler will do a constexpr conversion to std::size_t, which is then not considered to be a narrowing conversion.
If either indexing method is called with a non-constexpr signed integral value, then the conversion is considered narrowing and the compiler may emit a warning.

std::get() does compile-time bounds checking for constexpr indices
Since the length of a std::array is constexpr, if our index is also a constexpr value, then the compiler should be able to validate at compile-time that our constexpr index is within the bounds of the array (and stop compilation if the constexpr index is out of bounds).

However, operator[] does no bounds checking by definition, and at() only does runtime bounds checking. Function parameters can't be constexpr, so how do we pass a constexpr index?
To get compile-time bounds checking with a constexpr index, we can use the std::get() function template, which takes the index as a non-type template argument.
e.g.
    constexpr std::array prime{ 2, 3, 5, 7, 11 };

    std::cout << std::get<3>(prime); // print the value of element with index 3
    std::cout << std::get<9>(prime); // invalid index (compile error)

Inside the implementation of std::get(), there's a static_assert that checks to ensure the non-type template argument is smaller than the array length.
If it isn't, then the static_assert will halt the compilation process with copilation error.
std::get() can only be called with constexpr indices, since template arguments must be constexpr.

Quiz
1. 
Initialize a std::array with the following values: 'h' 'e' 'l' 'l' 'o'
Print the length of the array, then use operator[], at(), and std::get to print the value of the element with index 1.

std::array<char> wordYo{'h','e','l','l','o'};
std::cout << "The length is " << wordYo.size() << '\n';
std::cout << wordYo[1];
std::cout << wordYo.at(1);
std::cout << std::get<1>(wordYo);


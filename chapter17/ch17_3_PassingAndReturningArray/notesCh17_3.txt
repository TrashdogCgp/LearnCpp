17_3
Passing and returning std::array

An object of type std::array can be passed to a function just like any other object.
With a std::array, both the element type and array length are part of the type info of the object. So when we use a std::array as a function parameter, we have to explicitly specify the element type and array length.
e.g.
    void passByRef(const std::array<int, 5>& arr) // we must explicitly specify <int, 5> here
    {
        std::cout << arr[0] << '\n';
    }

CTAD doesn't work with function parameters, so we can't just specify std::array as the parameter type and let the compiler deduce template arguments.

Using function templates to pass std::array of different element types or lengths
To write a function that can accept std::array with any kind of element type or any length, we can create a function template that parameterizes both the element type and the length of our std::array, and C++ will use that function template to instantiate real functions with actual types and lengths.
e.g.
    template <typename T, std::size_t N> // note that this template parameter declaration matches the one for std::array
    void passByRef(const std::array<T, N>& arr)
    {
        std::cout << arr[0] << '\n';
    }
    std::array arr{ 9, 7, 5, 3, 1 }; // use CTAD to infer std::array<int, 5>
    passByRef(arr);  // ok: compiler will instantiate passByRef(const std::array<int, 5>& arr)

    std::array arr2{ 1, 2, 3, 4, 5, 6 }; // use CTAD to infer std::array<int, 6>
    passByRef(arr2); // ok: compiler will instantiate passByRef(const std::array<int, 6>& arr)

It's also possible to only template one of the two template parameters.
For example, we can parameterize only the length of the std::array, but the element type can be explicitly defined as int.
e.g.
    template <std::size_t N> // note: only the length has been templated here
    void passByRef(const std::array<int, N>& arr) // we've defined the element type as int
    {
        std::cout << arr[0] << '\n';
    }

Auto non-type template parametersIn C++20, we can use auto in a template parameter definition to have a non-type template parameter deduce its type from the argument.
e.g.
    template <typename T, auto N> // now using auto to deduce type of N
    void passByRef(const std::array<T, N>& arr)
    {
        std::cout << arr[0] << '\n';
    }

Static asserting on array length
We'd like the compiler to warn us when we try to do something like access an invalid index for a passed in array.
One advantage that template parameters have over function parameters is that template parameters are compile-time constants.
This means we can take advantage of capabilities that require constant expressions.
So a solution is to use std::get() for compile-time bounds checking, rather than using operator[] within the template function.
This will give us a compile error instead of undefined behavior at runtime.

Recall that std::get does compile-time bounds checking.

An alternative solution is to use static_assert to validate a precondition on the array length.
e.g.
    template <typename T, std::size_t N>
    void printElement3(const std::array<T, N>& arr)
    {
        // precondition: array length must be greater than 3 so element 3 exists
        static_assert (N > 3);

        // we can assume the array length is greater than 3 beyond this point

        std::cout << arr[3] << '\n';
    }
Note that we have to use static_assert to compare N to 3.
This is because of the language defect mentioned in the prior lesson, where std::size(arr) will not evaluate as a compile-time expression.

Returning a std::array
Passing a std::array to a function is conceptually simple--pass it by (const) reference.
But what about returning a std::array?
That's a bit more complicated. Unlike std::vector, std::array is not move-capable, so returning a std::array by value will copy the array.
The elements inside the array will be moved if move-capable, and copied otherwise.

There are two conventional options here, and the better option depends on circumstance.

Return a std::array by value
It's okay to return a std::array by value when all of the following are true
    The array isn't huge
    The element type is cheap to copy (or move)
    The code isn't being used in a performance-sensitive context

In such cases, a copy of the std::array will be made, but if all the above is true, the performance hit will be minor, and sticking with the most conventional way to return data to the caller may be the best choice.

Return by value has the pros:
    Most conventional way to return data to the caller
    Obvious that the function is returning a value
    We can define an array and use the function to initialize it in a single statement

But has the downsides:
    The function returns a copy of the array and all its elements. Not cheap.
    When we call the function, we must explicitly supply the template arguments since there's no parameter to deduce them from.

Returning a std::array via out parameter
In cases where return by value is expensive, we can use an out-parameter instead.
In this case, the caller is responsible for passing in the std::array by non-const reference (or by address), and the function can modify the array.

The primary advantage is efficiency; no copy of the array is made.
Downsides, though:
    This method of returning data isn't conventional, and it's not easy to tell that the function is modifying the argument.
    We can only use this method to assign values to the array, not initialize it.
    Such a function can't produce temporary objects.

std::vector is move-capable and can be returned by value without expensive copies.
If you return a std::array by value, your std::array probably isn't constexpr, and you should consider using and returning std::vector instead.

Quiz
1. 
#include <array>
#include <iostream>

template <typedef T, std::size_t N>
void printArray(const std::array& arr)
{
    static_assert (N > 0);
    std::cout << "The array ( " << arr[0];
    for(std::size_t i{0}; i<N; ++i)
    {
        std::cout << ',' << arr[i];
    }
    std::cout << ") has length" << N << '\n';
}

int main()
{
    constexpr std::array arr1 { 1, 4, 9, 16 };
    printArray(arr1);

    constexpr std::array arr2 { 'h', 'e', 'l', 'l', 'o' };
    printArray(arr2);

    return 0;
}

When run, it should print:

The array (1, 4, 9, 16) has length 4
The array (h, e, l, l, o) has length 5





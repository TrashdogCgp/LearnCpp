5_8
Constexpr and consteval functions

constexpr creates compile-type (symbolic constants). We've discussed constant expressions, which can be evaluated at compile-time rather than runtime.

Consider the following:

    constexpr int x{ 5 };
    constexpr int y{ 6 };

    std::cout << (x > y ? x : y) << " is greater!\n";

The compiler can evaluate the ternary at compile-time, reducing it to just 6.
Because this expression no longer needs to be evaluated at runtime, our program will run faster.
Having a non-trival expression in the middle of our statement isn't ideal, though.
It'd be better using a function!
But the function would execute at runtime, right?

A constexpr function is a function whose return value may be computerd at compile-time.
To make a function a constexpr function, we use the constexpr keyword in front of the return type.

constexpr int greater(int x, int y) // now a constexpr function
{ return (x > y ? x : y);}
constexpr int g { greater(x, y) }; // will be evaluated at compile-time

When a function call is evaluated at compile-time, the compiler will calculate the return value of the function call, then replace the function call with the return value.

To be eligible for compile-time evaluation, a function must have a constexpr return type and not call any non-constexpr functions when evaluated at compile time.

Note this term: "eligible for compile-time evaluation". It'll be used again later.
Also, see here for lesser encountered criteria:
https://en.cppreference.com/w/cpp/language/constexpr

Constexpr functions can also be evaluated at runtime.
In this case, they'll return a non-constexpr result.

e.g. give a constexpr function parameters that are not constexpr, and the function will just evaluate at runtime because it can't run at compile-time.

You might think that a constexpr function would evaluate at compile-time whenever possible, but this isn't the case. According to the C++ standard, a constexpr function eligible for compile-time evaluation must be evaluated at compile-time if the return value is used where a constant expression is required.
Otherwise, the compiler is free to evaluate the function at compile-time or at runtime.

e.g. given a constexpr function called greater():
    constexpr int g { greater(5, 6) };            // case 1: evaluated at compile-time
    int x{ 5 }; // not constexpr
    std::cout << greater(5, 6) << " is greater!\n"; // case 3: may be evaluated at either runtime or compile-time

So...
A constexpr function that is eligible to be evaluated at compile-time is only guaranteed to be evaluated at compile-time if the return value is used where a constant expression is required. Otherwise, compile-time evaluation is not guaranteed.
Think of a constexpr function as "can be used in a constant expression", not "will be evaluated at compile-time".

Best practice: Unless you have a specific reason not to do so, a function that can be made constexpr should generally be made constexpr.

Prior to C++20, there was no language standard to determine whether a constexpr function call is evaluating at compile-time or at runtime.
In C++20, std::is_constant_evaluated() returns a bool indicating whether the current function call is executing in a constant context.
e.g.
#include <type_traits> // for std::is_constant_evaluated

constexpr int someFunction()
{
    if (std::is_constant_evaluated()) // if compile-time evaluation
        // do something
    else // runtime evaluation
        // do something else
}

The most common way to enforce compile-time evaluation of a function is to use the return value to initialize a constexpr variable.
Unfortunately, this requires introducing a new variable into the program just to ensure compile-time evaluation, which is ugly and reduces code readability.
C++20 introduces consteval, which is a better workaround to this issue.

Consteval is used to indicate that a function must evaluate at compile-time, otherwise a compile error will result.
Such functions are called immediate functions.

Best practice: Use consteval if you have a function that must run at compile-time for some reason (e.g. performance)

The downside of consteval functions is that such functions can't evaluate at runtime, making them less flexible than constexpr functions, which can do either.
Therefore, it would still be useful to have a convenient way to force compile-time evaluation while still allowing runtime evaluation where that can't happen.

Consteval functions provide a way to make that happen, using a neat helper function.
See below:
consteval auto compileTime(auto value)
{return value;}

constexpr int greater(int x, int y) // function is constexpr
{ return (x > y ? x : y);}

std::cout << compileTime(greater(5, 6)) << '\n'; // will execute at compile-time

Constexpr/consteval functions are implicitly inline
Because constexpr functions may be evaluated at compile-time, the compiler must be able to see the full definition of the constexpr function at all points where the function is called.
A forward declaration won't suffice, even if the actual function definition appears later in the same compilation unit.

So then, a constexpr function called in multiple files needs to have its definition included into each such file. To avoid such problems, constexpr functions are implicitly inline, and except from the one-definition rule.
Constexpr functions are then often defined inheader files, so they can be included into any cpp file that requires the full definition.
Consteval functions are also implicitly inline for the same reason.

Best practice: Constexpr/consteval functions used in a single source file (cpp) can be defined in the source file above where they are used.
Constexpr/consteval functions used in multiple source files should be defined in a header file so they can be included into each source file.

Constexpr/consteval function parameters are not constexpr (but can be used as arguments to other constexpr functions)
The parameters of a constexpr function are not constexpr (and thus cannot be used in constant expressions). Such parameters can be declared as const, in which case they are treated as runtime constants, but not constexpr. This is because constexpr functions can be evaluated at runtime (which would be impossible if the parameters were compile-time constants).
An exception is made in one case: a constexpr function can pass those parameters as arguments to another constexpr function, and that subsequent constexpr function can be resolved at compile-time. This allows constexpr functions to sitll be resolved at compile-time when they call other constexpr functions (including themselves recursively).

Surprisingly, the parameters of a consteval function are not considered constexpr within the function either (even though consteval functions can only be evaluated at compile-time).
This decision was made for consistency.

Here's a contrived example illustrating this:
(hate to copy verbatim from the site, but this is starting to actually make my head spin just a bit)
#include <iostream>

constexpr int goo(int c)
{
    return c;
}

constexpr int foo(int b)
{
    constexpr int b2 { b }; // compile error: b is not a constant expression within foo()

    return goo(b);          // okay: b can still be used as argument to constexpr function goo()
}

int main()
{
    constexpr int a { 5 };

    std::cout << foo(a); // okay: constant expression a can be used as argument to constexpr function foo()

    return 0;
}

If you need constexpr parameters to a function, see ch10_18, non-type template parameters

Can a constexpr function call a non-constexpr function?
Yes, but only when the constexpr function is being evaluated in a non-constant context.
A non-constexpr function may not be called when a constexpr function is evaluating in a constant context (because then the constexpr function wouldn't be able to produce a compile-time value).

For best results, avoid calling non-constexpr functions from within a constexpr function if possible.
If your constexpr function requires different behavior for constant and non-constant contexts, conditionalize the behavior with: if(std::is_constant_evaluated()).
Always test your constexpr functions in a constant context, as they may work when called in a non-constant context, but fail in a constant context.


5_7
Inline functions and variables

Pretend we need to write some code to perform some discrete task, like reading input from the user or outputting to a file.
When implementing, you have two essential options:
Write the code as part of an existing function
or
Create a function to handle the task

Writing functions provides many potential benefits, as code in a function:
Is easier to read
Is easier to use (implementation understanding not required)
Is easier to update
Is easier to reuse

However, a downside of using a function is that every time a function is called, there is a certain amount of performance overhead that occurs.
When a function call is encountered, the CPU must store the address of the current instruction so it knows where to return to later, along with the values of various CPU registers (so they can be restored upon returning).
Then the parameters for the function must be instantiated and initialized. Then the execution path has to jump to the function code, and then jump back when the function ends.
This has to be done for each function call.

For functions that are large or perform complex tasks, the overhead is insignificant compared to the time the function takes to run.
However, small functions can have the overhead costs be larger than the time needed to even execute the function's code.
In cases where a small function is called often, using a function can result in a significant performance penalty over writing the code in place.

The C++ compiler has a trick to avoid such overhead cost: Inline expansion. This is a process where a function call is replaced by the code from the function's definition.

Beyond removing the cost of a function call, inline expansion can also allow the compiler to optimize the resulting code more efficiently.

However, inline expansion has its own cost; if the body of the function takes more instructions than the function call being replaced, then each inline expansion will grow the executable.
Larger executables tend to be slower due to not fitting as well in memory caches.

The decision about whether a function would benefit from being made inline is not straightforward.

Inline expansion could result in performance improvements, performance reductions, or no change to performance at all, depending on the relative cost of a function call, the size of the function, and what other optimizations can be performed.

Inline expansion is best suited to simple short functions (no more than a few statements), especially in cases where a single function call can execute more than once (like function calls inside a loop).

Every function falls into one of two categories. Either the call to the function may be expanded (most functions), or can't be expanded.
Modern optimizing compilers make the decision about when functions should be expanded inline.

Historically, compilers either didn't have the capability to determine whether inline expansion would be beneficial, or they just weren't good at it.
This led C++ to provide the keyword inline, which was originally intended to be used as a hint to the compiler tha a function would probably benefit from inline expansion.

A function declared using the inline keyword is called an inline function.
However, in modern C++, the inline keyword is no longer used to request inline expansion, for several reasons:
Using inline to request inline expansion is a form of premature optimization, and misuse could actually harm performance.
The inline keyword is just a hint, and the compiler can ignore it.
The inline keyword is defined at the wrong level of granularity; we use inline on a function definition, but inline expansion is actually determined per function call.

Modern optimizing compilers are good at determining when to expand inline, so expect the compiler to ignore or devalue any use of inline to request inline expansion for functions.

Best practice: Do not use the inline keyword to request inline expansion for your functions.

Modern inline word:
In previous chapters, we mentioned that you shouldn't implement functions in header files, because when the headers are copied into multiple cpp files, the function definition will be copied into multiple cpp files.
These files will then be compiled, and the linker will throw an error because it will note that you've defined the same function more than once.

In modern C++, the term inline has evolved to mean "multiple definitions are allowed". Thus, an inline function is one that is allowed to be defined in multiple files.
Inline functions have two primary requirements:
The compiler needs to be able to see the full definition of an inline function in each translation unit where the function is used (a forward declaration will not suffice on its own). The definition can occur after the point of use if a forward declaration is also provided.
and
Every definition for an inline function must be identical, or undefined behavior will result.

The linker will consolidate all inline function definitions for an identifier into a single definition.

Inline functions are typically defined in header files, where they can be included into the top of any code file that needs to see the full definition of the header. This ensures that all inline definitions for an identifier are identical.

This is particularly useful for header-only libraries, which are one or more header files that implement some capability (with no cpp files).
Header-only libraries are popular because there are no source files that need to be added to a project to use them and nothing needs to be linked. You can include the header-only library and then use it.

For the most part, you should not mark functions/variables inline unless you're defining them in a header file (and they're not already implicitly inline).

The following are implicitly inline:
Functions defined in a class, struct, or union type definition
Constexpr/consteval functions
Functions implicitly instantiated from function templates

Inline variables
C++17 introduces inline variables, which are variables that are allowed to be defined in multiple files.
Inline variables work similarly to inline functions, and have the same requirements.

Static constexpr variables are implicitly inline.

Unlike constexpr functions, (non-static) constexpr variables are not inline by default.










15_5
Class templates with member functions

With a function template, we can define type template parameters (e.g. typename T) and use them as the type for our function parameters (T x, T y)

With a class template, we can use the type template parameters for the type of our data members of class types (struct, class, union).

When we combine both, we get class templates that have member functions.

Type template parameters in member functions
Type template parameters defined as part of a class template parameter declaration can be used both as the type of data members and as the type of member function parameters.
e.g.
    template <typename T>
    class Pair
    {
    private:
        T m_first{};
        T m_second{};

    public:
        // When we define a member function inside the class definition,
        // the template parameter declaration belonging to the class applies
        Pair(const T& first, const T& second)
            : m_first{ first }
            , m_second{ second }
        {
        }

        bool isEqual(const Pair<T>& pair);
    };

    // When we define a member function outside the class definition,
    // we need to resupply a template parameter declaration
    template <typename T>
    bool Pair<T>::isEqual(const Pair<T>& pair)
    {
        return m_first == pair.m_first && m_second == pair.m_second;
    }

This should be pretty straightforward, but there are some things worth noting.

    First, because the class has private members, it is not an aggregated, and can't use aggregate initialization. Instead, we have to initialize our class objects using a constructor.

    Since our class data members are of type T, we make the parameters of our constructor type const T& so the user can supply initialization values of the same time, and because T might be expensive to copy (justification for the pass by const reference).

    Note that when we define a member function inside the class template definition, we don't need to provide a template parameter declaration for the member function. Such member functions implicitly use the class template parameter declaration.

    Second, we don't need deduction guides for CTAD to work with non-aggregate classes. A matching constructor provides the compiler with the info it needs to deduce the template parameters from the initializers.

    Third, when we define a member function for a class template outside of the class template definition, we have to resupply a template parameter declaration (template <typename T>) so the compiler knows what T is.
    And since it's defined outside of the class, we need to qualify the member function with the fully templated name of the class.
        Pair<T>::isEqual, not Pair::isEqual

Where to define member functions for class templates outside the class
With member functions for class templates, the compiler needs to both see the class definition (to ensure that the member function template is declared as part fo the class) and the template member function definition (to know how to instantiate the template). Therefore, we typically want to define both a class and its member function templates in the same location.

When a member function template is defined inside the class definition, the template member function is part of the class definition, so anywhere the class definition can be seen, the template member function definition can also be seen.
This makes things easy at the cost of cluttering our class definition.

When a member function template is defined outside the class definition, it should generally be defined immediately below the class definition. That way, anywhere the class definition can be seen, the member function template definitions immediately below the class definition will also be seen.
In the typical case where a class is defined in a header file, this means any member function templates defined outside the class should also be defined in the same header file, below the class definition.

Best practice: Any member function templates defined outside the class definition should be defined just below the class definition (in the same file).

Quiz

1. Write a class template named Triad that has 3 private data members with independent type template parameters. The class should have a constructor, access functions, and a print() member function that is defined outside the class.

see ch15_5_1.cpp

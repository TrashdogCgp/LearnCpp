13_7
Default member initialization

When we define a struct/class type, we can provide default init value for each member.
This process is called non-static member initialization, and the initialization value is called a default member initializer.
e.g.
    struct Something
    {
        int x;       // no initialization value (bad)
        int y {};    // value-initialized by default
        int z { 2 }; // explicit default value
    };

In the above, x has no default value, which is lame.
y is value-initialized.
z has the default value of 2.
These defaults will be used if the user doesn't provide explicit init values when instantiating an object of type Something.

Using default member initializers (or other mechanisms to be covered later), structs/classes can self-initialize even without explicit initializers provided.

CTAD (class template argument deduction) can't be used in non-static member initialization.

Explicit initialization values take precedence over default values.
Explicit values in a list initializer always take precedence over default member initialization values.

Missing initializers in an init list when default values exist
We noted that if an aggregate is initialized, but the number of init values is fewer than the number of members, then all remaining members will be value-initialized. However, if a default member init is provided for a given member, that default member initializer will be used instead.
e.g.
    struct Something
    {
        int x;       // no default initialization value (bad)
        int y {};    // value-initialized by default
        int z { 2 }; // explicit default value
    };
    Something s3 {}; // value initialize s3.x, use default values for s3.y and s3.z

Recapping initialization possibilities
If an aggregate is defined with an init list:
    *If explicit initialization value exists, that explicit value is used
    *If initializer is missing and a default member initializer exists, the default is used
    *If initializer is missing and no default member initializer exists, value init occurs.

If an aggregate is defined with no initialization list:
    *If a default member init exists, the default is used
    *If no default member init exists, the member remains uninitialized

e.g.
    Something s1;             // No initializer list: s1.x is uninitialized, s1.y and s1.z use defaults
    Something s2 { 5, 6, 7 }; // Explicit initializers: s2.x, s2.y, and s2.z use explicit values (no default values are used)
    Something s3 {};          // Missing initializers: s3.x is value initialized, s3.y and s3.z use defaults

Always provide default values for your members
To avoid the possibility of uninitialized members, simply ensure that each member has a default value (either an explicit default value, or an empty pair of braces). That way, our members will be initialized with some value regardless of whether or not we provide an initializer list.

Best practice: Provide a default value for all members. This ensures that your members will be initialized even if the variable definition doesn't include an initializer list.

Default initialization vs value initialization for aggregates
Value initialization is safer, because it will ensure any members with no default values are value initialized. While it's bad practice not to have default values for any members in a struct, this protects against the case where that advice was neglected.
Preferring value initialization also has the benefit of being consistent with our usual initialization of objects of other types. Consistency is useful for error prevention.

Best practice: For aggregates, prefer value initialization (with empty brace initializer) over default initialization (with no braces).

Value initialization wasn't introduced until C++11, so programmers use default initialization instead of value initialization for class types somewhat frequently. This is for historic reasons.
The tutorial recommends value init for structs and classes, but not as adamantly as other recommendations.

7_6
Internal linkage

An identifier's linkage determines whether other declarations of that name refer to the same object or not.
Local variables have no linkage.
Global variables and function identifiers can have internal linkage or external linkage.

An identifier with internal linkage can be seen and used within a single translation unit, but it is not accessible from other translation units (that is, not exposed to the linker).
This means that if two source files have identically named identifiers with internal linkage, those identifiers will be treated as independent (no ODR violation for duplicate definitions).

Global variables with internal linkage are sometimes called internal variables.
To make a non-constant global internal, we use the static keyword.
static int g_x{}; // non-constant globals have external linkage by default, but can be given internal linkage via the static keyword

Const and constexpr global variables have internal linkage by default, and thus don't need the static keyword. If it is used, it will be ignored.

Note that static is an example of a storage class specifier, which sets both linkage and storage duration for a variable.
The most commonly used storage class specifiers are static, extern, and mutable.
The term storage class specifiers is mostly used in technical documentation.

Functions with internal linkage
Because linkage is a property of an identifier (not of a variable), function identifiers have the same linkage property that variable identifiers do.
Functions default to external linkage (which we'll cover in the next lesson), but can be set to internal linkage via the static keyword.

e.g.
// This function is declared as static, and can now be used only within this file
// Attempts to access it from another file via a function forward declaration will fail
[[maybe_unused]] static int add(int x, int y)
{
    return x + y;
}

The one-definition rule and internal linkage
It's worth noting that internal objects and functions that are defined in different files are considered to be independent entities (even if their names and types are identical), so there's no violation of the one-definition rule.
Each internal object only has one definition.

In modern C++, use of static for giving identifiers internal linkage is falling out of favor.
Unnamed namespaces can give internal linkage to a wider range of identifiers (e.g. type identifiers), and they are better suited for giving many identifiers internal linkage.
ch7_13 goes over unnamed and inline namespaces.

Why bother giving identifiers internal linkage?

Typically two reasons:
There is an identifier we want to make sure isn't accessible to other files. This could be a global variable, or a helper function we don't want called.
or
Being pedantic about avoiding naming collisions. Because identifiers with internal linkage aren't exposed to the linker, they can only collide with names in the same translation unit, not the entire program.

Many modern dev guides recommend giving every variable and function internal linkage if they're not meant to be used from anotherrfile
For now, lighter rules.
Best practice: Give identifiers internal linkage when you have an explicit reason to disallow access from other files.
Consider giving all identifiers you don't want accessible to other files internal linkage (use an unnamed namespace for this).

7_5
Variable shadowing (name hiding)

Each block defines its own scope region. So what happens when a variable in a nested block has the same name as a variable in an outer block?
When this happens, the nested variable hides the outer variable in areas where they are both in scope.
This is called name hiding or shadowing.
e.g.
int apples { 5 }; // here's the outer block apples

{ // nested block
    // apples refers to outer block apples here
    std::cout << apples << '\n'; // print value of outer block apples

    int apples{ 0 }; // define apples in the scope of the nested block
    //from here until the end of the block apples refers to the inner block variable
}

Similar to how variables in a nested block can shadow variables in an outer block, local variables with the same name as a global variable will shadow the global variable whenever the local variable is in scope.

However, because global variables are part of the global namespace, we can use the scope operator with no prefix to tell the compiler we mean the global variable instead of the local variable.

Shadowing of local variables should generally be avoided, as it can lead to inadvertent errors where the wrong variable is used or modified.
Also, avoid shadowing local variables. This is trivially avoidable if your global names all use a g_ prefix.

GCC and Clang support the flag -Wshadow that will generate warnings if a variable is shadowed. There are several subvariants of this flag (-Wshadow=global, -Wshadow=local, and -Wshadow=compatible-local).

Best practice: Avoid variable shadowing.








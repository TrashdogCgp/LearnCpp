7_9
Sharing global constants across multiple files (using inline variables)

Sometimes, symbolic constants need to be used throughout your code (not just one location). Think math/physics constants.
Rather than redefining them (DRY), share them!

Doing this prior to C++17 is as follows:
Create a header file
In this header file, define a namespace
Add all your constants in the namespace (constexpr)
#include the header file wherever you need it

Because this header gets included in a cpp file, each of these variables will be copied into that code file at the point of inclusion.
They're treated as globals since they live outside of a function, so you can use them anywhere in that file.
Because const globals have internal linkage, each cpp file gets an independent version of the global variable that the linker can't see.
Since they're usually const, the compiler will usually optimize the variables away.

There are downsides to this method.
While it's simple, these variables are copied with each include. If you include a header in 20 files, that's 20 duplicates.
This introduces two challenges:
Changing a single constant value requires recompiling every file that includes the header.
If constants are large in size and can't be optimized away, this can use a lot of memory.

One way to avoid these issues is by turning these constants into external variables, since we can then have a single variable (initialized once) that is shared across all files.
In this method, we define the constants in a cpp file (to ensure definitions only exist in one place) and put forward declarations in the header (which will be included by other files).

Note: This lesson uses const instead of constexpr because constexpr variables can't be forward declared, even if they have external linkage.
This is because the compiler needs the value at compile time, and a forward declaration doesn't provide this info.

Under this implementation, symbolic constants will only get instantiated once instead of in each code file where the header is included, and all uses of these constants will be linked to the version instantiated in the cpp file.

However, this method also has downsides.
First, these constants are compile-time within only the file they're actually defined in.
In other files, the compiler will only see the forward declaration, which doesn't define a constant value.
So in other files, they're runtime constants, not compile-time. Might impact compiler optimization.
Given this downside, prefer defining constants in a header file, and if values for constants are changing, move the offending constants into a cpp file as needed to deal with the long compilation times.

Inline variables can have more than one definition, as long as those definitions are identical.
By making our constexpr variables inline, we can define them in a header file and then include them in any cpp file that requires them.
e.g.//header file
#ifndef CONSTANTS_H
#define CONSTANTS_H
namespace constants
{
    inline constexpr double pi { 3.14159 }; // note: now inline constexpr
    inline constexpr double avogadro { 6.0221413e23 };
    inline constexpr double myGravity { 9.2 }; // m/s^2 -- gravity is light on this planet
}
#endif

This avoids ODR and the downside of duplicated variables.
We can include constants.h into as many code files as we want, but these variables will only be instantiated once and shared across all code files.
However, this does retain the downside of requiring every file that includes the constants header to be recompiled if any constant value is changed.

A reminder: Constexpr functions are implicitly inline, but constexpr variables are not explicitly inline.

Best practice: If you need global constants and your compiler supports C++17, prefer defining inline constexpr global variables in a header file.

Also, remember to use std::string_view for constexpr strings.

7_13
Unnamed and inline namespaces

An unnamed namespace (also called an anonymous namespace) is a namespace that is defined without a name, like so:

#include <iostream>
namespace // unnamed namespace
{
    void doSomething() // can only be accessed in this file
    {std::cout << "v1\n";}
}
int main()
{    doSomething(); // we can call doSomething() without a namespace prefix
    return 0;
}

All the content in an unnamed namespace is treated as if it's part of the parent namespace.
So even though function doSomething() is defined in the unnamed namespace, the function itself is accessible from the parent namespace (which in this case is the global namespace), which is why we can call doSomething() from main() without any qualifiers.

While this might seem useless, there's another effect.
Unnamed namespaces make all identifiers inside the namespace treated as if they have internal linkage, which means the content of an unnamed namespace can't be seen outside of that file.

For functions, this is effectively the same as defining all functions in the unnamed namespace as static functions. The following is effectively identical to the previous example:
#include <iostream>

static void doSomething() // can only be accessed in this file
{std::cout << "v1\n";}
int main()
{   doSomething(); // we can call doSomething() without a namespace prefix
    return 0;
}

Unnamed namespaces are typically used when you have a lot of content that you want to keep local to a given file. It's usually easier to cluster such content in a single unnamed namespace than individually mark all of them as static.
Unnamed namespaces will also keep program-defined types (later lesson) local to the file, which there's no alternative mechanism to do.

Inline namespaces
An inline namespace is a namespace that is typically used to version content.
Much like an unnamed namespace, anything in the inline namespace is considered part of the parent namespace. Howeer, inline namespaces don't affect linkage.

We use the inline keyword.
e.g.
#include <iostream>

inline namespace V1 // declare an inline namespace named V1
{    void doSomething()
    {std::cout << "V1\n";}
}

namespace V2 // declare a normal namespace named V2
{   void doSomething()
    {std::cout << "V2\n";}
}
int main()
{   V1::doSomething(); // calls the V1 version of doSomething()
    V2::doSomething(); // calls the V2 version of doSomething()
    doSomething(); // calls the inline version of doSomething() (which is V1)
    return 0;
}

This preserves an existing function while allowing modifications for newer programs to take advantage of.

Mixing inline and unnamed namespaces
A namespace can be both inline and unnamed.

inline namespace // declare an inline unnamed namespace
{   void doSomething() // has internal linkage
    { std::cout << "V2\n"; }
}

However, in such cases, it's probably better to nest an anonymous namespace inside an inline namespace. this has the same effect (all functions in the anonymous namespace have internal linkage by default), but still gives you an explicit namespace name you can use.

That's done like so:
inline namespace V2 // declare an inline namespace named V2
{
    namespace // unnamed namespace
    {
        void doSomething() // has internal linkage
        {
            std::cout << "V2\n";
        }

    }
}

